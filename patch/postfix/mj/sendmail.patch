Only in postfix-3.4.5-patched/src/sendmail/: Makefile
diff -c postfix-3.4.5/src/sendmail/sendmail.c postfix-3.3.2-patched/src/sendmail/sendmail.c
*** postfix-3.4.5/src/sendmail/sendmail.c	2017-10-28 15:13:42.000000000 +0300
--- postfix-3.4.5-patched/src/sendmail/sendmail.c	2019-02-27 18:48:44.223028760 +0300
***************
*** 499,504 ****
--- 499,505 ----
  #include <user_acl.h>
  #include <dsn_mask.h>
  #include <mail_parm_split.h>
+ #include <majordomo_rate_limit.h>
  
  /* Application-specific. */
  
***************
*** 638,644 ****
  static void enqueue(const int flags, const char *encoding,
  		         const char *dsn_envid, int dsn_ret, int dsn_notify,
  		            const char *rewrite_context, const char *sender,
! 		            const char *full_name, char **recipients)
  {
      VSTRING *buf;
      VSTREAM *dst;
--- 639,645 ----
  static void enqueue(const int flags, const char *encoding,
  		         const char *dsn_envid, int dsn_ret, int dsn_notify,
  		            const char *rewrite_context, const char *sender,
! 		            const char *full_name, char **recipients, u_int32_t mj_postdrop_flags)
  {
      VSTRING *buf;
      VSTREAM *dst;
***************
*** 726,731 ****
--- 727,736 ----
      vstring_sprintf(postdrop_command, "%s/postdrop -r", var_command_dir);
      for (level = 0; level < msg_verbose; level++)
  	vstring_strcat(postdrop_command, " -v");
+     if (mj_postdrop_flags == MJ_DECREASE_MESSAGE_LIMIT)
+         vstring_strcat(postdrop_command, " -u");
+     if (mj_postdrop_flags == MJ_FLUSH_RATE_DBS)
+         vstring_strcat(postdrop_command, " -f");
      if ((handle = mail_stream_command(STR(postdrop_command))) == 0)
  	msg_fatal_status(EX_UNAVAILABLE, "%s(%ld): unable to execute %s: %m",
  			 saved_sender, (long) uid, STR(postdrop_command));
***************
*** 1010,1015 ****
--- 1015,1027 ----
      int     saved_optind;
      ARGV   *import_env;
  
+ 	/* MJ variables */
+ 	MJ_DBS mj_postfix_dbs;
+ 	uid_t mj_user_access_me_uid = getuid();
+ 	int mj_ret;
+ 	u_int32_t mj_dbs_open_flags;
+ 	u_int32_t mj_postdrop_flags = NULL;
+ 
      /*
       * Fingerprint executables and core dumps.
       */
***************
*** 1385,1392 ****
  	    mail_run_replace(var_command_dir, ext_argv->argv);
  	    /* NOTREACHED */
  	} else {
  	    enqueue(flags, encoding, dsn_envid, dsn_ret, dsn_notify,
! 		    rewrite_context, sender, full_name, argv + OPTIND);
  	    exit(0);
  	    /* NOTREACHED */
  	}
--- 1397,1428 ----
  	    mail_run_replace(var_command_dir, ext_argv->argv);
  	    /* NOTREACHED */
  	} else {
+ 		/* Added by MJ engineers */
+ 		/* Setup database instances */
+ 		mj_dbs_open_flags = DB_RDONLY;
+ 		mj_initialize_dbs(&mj_postfix_dbs);
+ 		mj_set_db_filenames(&mj_postfix_dbs);
+ 		mj_databases_setup(&mj_postfix_dbs, argv[0], stderr, mj_dbs_open_flags);
+ 
+ 		/* Checking is rate limit exceed */
+ 		mj_ret = mj_check_is_rate_exceed(&mj_postfix_dbs, mj_user_access_me_uid);
+ 		if (mj_ret == MJ_PERIOD_NOT_EXCEED_RATE_EXCEED)
+ 			msg_fatal_status(EX_TEMPFAIL, "UID: %d rate limit exceed", mj_user_access_me_uid);
+ 		else if (mj_ret == MJ_PERIOD_NOT_EXCEED_RATE_NOT_EXCEED)
+ 			mj_postdrop_flags = MJ_DECREASE_MESSAGE_LIMIT;
+ 		else if (mj_ret == MJ_PERIOD_EXCEED_RATE_UPDATED_PERIOD_UPDATED)
+ 			mj_postdrop_flags = MJ_FLUSH_RATE_DBS;
+ 		else if (mj_ret == MJ_FIRST_MESSAGE_PERIOD_UPDATED_RATE_UPDATED)
+ 			mj_postdrop_flags = MJ_FLUSH_RATE_DBS;
+ 
+ 		/* Checking is uid blocked by billing */
+ 		mj_ret = mj_check_is_blocked_by_billing(mj_postfix_dbs.senders_map_db_pointer, mj_user_access_me_uid);
+ 		if (mj_ret == MJ_BLOCKED_BY_BILLING)
+ 			msg_fatal_status(EX_UNAVAILABLE, "UID: %d blocked by billing", mj_user_access_me_uid);
+ 		mj_databases_close(&mj_postfix_dbs);
+ 
  	    enqueue(flags, encoding, dsn_envid, dsn_ret, dsn_notify,
! 		    rewrite_context, sender, full_name, argv + OPTIND, mj_postdrop_flags);
  	    exit(0);
  	    /* NOTREACHED */
  	}
